package src;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import javax.swing.*;
import javax.swing.border.MatteBorder;
import javax.swing.table.DefaultTableModel;

import src.Customs.CustomButton;

import java.awt.*;
import java.util.*;
import java.util.List;

public class MainFrame extends JFrame {
    private JPanel productPanel;
    protected CustomButton deliverButton;    
    protected CustomButton toReceiveButton;
    protected CustomButton historyButton;
    private CustomButton searchButton;
    protected CustomButton cartButton;
    private JLabel iphoneLabel;    
    private JLabel iphonePrice;
    private CustomButton iphoneMinusButton;
    private CustomButton iphonePlusButton;
    private JLabel macbookLabel;
    private JLabel macbookPrice;
    private CustomButton macbookMinusButton;
    private CustomButton macbookPlusButton;
    private JLabel samsungLabel;
    private JLabel samsungPrice;
    private CustomButton samsungMinusButton;
    private CustomButton samsungPlusButton;
    private JLabel cartSizeLabel;
    private ArrayList<String> shoppingCart;
    private Map<String, ImageIcon> productImages;
    private String logged;



    private java.net.URL back;
    private java.net.URL iphonePath;
    private java.net.URL macbookPath;
    private java.net.URL samsungPath;
    private java.net.URL dataDel;

    // MainFrame
    public MainFrame(String logged) {
        this.logged = logged;

        back = getClass().getResource("resources/Background.png");
        iphonePath = getClass().getResource("resources/Iphone12.png");
        macbookPath = getClass().getResource("resources/Macbook.png");
        samsungPath = getClass().getResource("resources/Samsung.png");
        dataDel = getClass().getResource("data/delivery.txt");
        

        setTitle("NAOIMISE");
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setSize(1100, 943);
		setLocationRelativeTo(null);
        setResizable(false);
        setLayout(null);

        // Create a background label with the specified image
        ImageIcon backgroundImage = new ImageIcon(back);
        JLabel backgroundLabel = new JLabel(backgroundImage);
        backgroundLabel.setBounds(0, 0, getWidth(), getHeight());
        add(backgroundLabel);

        // Create and customize the title label
        JLabel titleLabel = new JLabel("NAOIMISE");
        titleLabel.setBounds(0, 20, getWidth(), 50);
        titleLabel.setHorizontalAlignment(JLabel.CENTER);
        titleLabel.setFont(new Font("joystix monospace", Font.BOLD, 50));
        backgroundLabel.add(titleLabel);

        // Create the product panel and set its properties
        productPanel = new JPanel();
        productPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10)); // Set FlowLayout for horizontal and centered
                                                                           // positioning
        productPanel.setOpaque(false);
        productPanel.setBounds(100, 200, getWidth() - 200, getHeight() - 300);
        backgroundLabel.add(productPanel);

        // Create and customize the buttons
        deliverButton = new CustomButton("Deliver");
        deliverButton.setBounds(50, 100, 200, 50);
        backgroundLabel.add(deliverButton);

        
        toReceiveButton = new CustomButton("To Receive");
        toReceiveButton.setFont(new Font("joystix monospace", Font.PLAIN, 18));
        toReceiveButton.setBounds(260, 100, 200, 50);
        toReceiveButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent a) {
                JFrame toRecFrame = new JFrame("Delivery to be Received");
                toRecFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
                toRecFrame.setFont(new Font("joystix monospace", Font.BOLD, 30));
                toRecFrame.setSize(1000, 500);
                toRecFrame.setResizable(false);
                toRecFrame.setLocationRelativeTo(null);
                toRecFrame.setLayout(new BorderLayout());

                JTable table = new JTable(new DefaultTableModel(new Object[]{"ID", "Fullname", "Address", "Items", "", ""}, 0)){
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };

                table.getColumnModel().getColumn(0).setPreferredWidth(100);
                table.getColumnModel().getColumn(1).setPreferredWidth(100);
                table.getColumnModel().getColumn(2).setPreferredWidth(100);
                table.getColumnModel().getColumn(3).setPreferredWidth(500);
                    
                table.setBorder(new MatteBorder(1, 1, 0, 0, new Color(220,220,220)));
                table.setGridColor(new Color(220,220,220));
                
                table.setCellSelectionEnabled(false);
                DefaultTableModel tableModel = (DefaultTableModel) table.getModel();
                

                
                try{
                    FileReader fr = new FileReader(new File(dataDel.toURI()));
                    BufferedReader br = new BufferedReader(fr);
                    String line;
                    while((line=br.readLine())!=null){
                        String[] lnSplitted = line.split(";");

                        if (lnSplitted[1].equals(logged) && lnSplitted[6].equals("False") ){
                            tableModel.addRow(new Object[]{lnSplitted[1], lnSplitted[2] + " " + lnSplitted[3], lnSplitted[4], lnSplitted[7], lnSplitted[0], lnSplitted[6]});
                        }
                    }
                    fr.close();
                }catch(Exception e){
                    e.printStackTrace();
                }

                JScrollPane tableScr  = new JScrollPane(table);
                tableScr.setBorder( BorderFactory.createLineBorder(new Color(170,170,170)));
                tableScr.setBounds(10, 60, 960, 340);
            
                table.removeColumn(table.getColumnModel().getColumn(4));                   
                table.removeColumn(table.getColumnModel().getColumn(4));   


                
                // the back button
                CustomButton orderReceivedBtn = new CustomButton("Order Received");
                orderReceivedBtn.setFont(new Font("joystix monospace", Font.BOLD, 15));
                orderReceivedBtn.setBounds(10, 410, 200, 45);
                orderReceivedBtn.addActionListener(new ActionListener() {

                    public void actionPerformed(ActionEvent e) {
                        if (!table.getSelectionModel().isSelectionEmpty() && JOptionPane.showConfirmDialog(
                            MainFrame.this, 
                            "Are you sure you received the item?", 
                            "Delivery Reception",
                            JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){

                            try {
                                Path p = Paths.get(dataDel.toURI());

                                List<String> fileContent = new ArrayList<>(Files.readAllLines(p, StandardCharsets.UTF_8));

                                for (int i = 0; i < fileContent.size(); i++) {
                                    String[] lnSplitted = fileContent.get(i).split(";");

                                    int column = 4;
                                    int row = table.getSelectedRow();
                                    String value = table.getModel().getValueAt(row, column).toString();


                                    if (lnSplitted[0].equals(value)) {
                                        fileContent.set(
                                            i, 
                                            String.format(
                                                "%s;%s;%s;%s;%s;%s;%s;%s",
                                                lnSplitted[0],
                                                logged,
                                                lnSplitted[2],
                                                lnSplitted[3],
                                                lnSplitted[4],
                                                lnSplitted[5],
                                                "True",
                                                lnSplitted[7])
                                            );
                                        break;
                                    }
                                }

                                Files.write(p, fileContent, StandardCharsets.UTF_8);

                                tableModel.setRowCount(0);

                                FileReader fr = new FileReader(new File(dataDel.toURI()));
                                BufferedReader br = new BufferedReader(fr);
                                String line;
                                while((line=br.readLine())!=null){
                                    String[] lnSplitted = line.split(";");

                                    if (lnSplitted[1].equals(logged) && lnSplitted[6].equals("False") ){
                                        tableModel.addRow(new Object[]{lnSplitted[1], lnSplitted[2] + " " + lnSplitted[3], lnSplitted[4], lnSplitted[7], lnSplitted[0], lnSplitted[6]});
                                    }
                                }
                                fr.close();
                                
                            } catch (Exception eo) {
                                eo.printStackTrace();

                            }
                        }
                    }
       
                });
                
                JLabel titleLabel = new JLabel("DELIVERY TO BE RECEIVED");
                titleLabel.setBounds(0, 5, getWidth(), 50);
                titleLabel.setHorizontalAlignment(JLabel.CENTER);
                titleLabel.setFont(new Font("joystix monospace", Font.BOLD, 30));
                
                toRecFrame.add(titleLabel);  
                toRecFrame.add(orderReceivedBtn);
                toRecFrame.add(tableScr);                         
                toRecFrame.add(new JPanel());                
       
                toRecFrame.setVisible(true);
                
            }
        });
        backgroundLabel.add(toReceiveButton);

        
        historyButton = new CustomButton("History");
        historyButton.setBounds(470, 100, 200, 50);
        historyButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent a) {
                JFrame toRecFrame = new JFrame("History");
                toRecFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
                toRecFrame.setFont(new Font("joystix monospace", Font.BOLD, 30));
                toRecFrame.setSize(1000, 500);
                toRecFrame.setResizable(false);
                toRecFrame.setLocationRelativeTo(null);
                toRecFrame.setLayout(new BorderLayout());

                JTable table = new JTable(new DefaultTableModel(new Object[]{"ID", "Fullname", "Address", "Items", "", ""}, 0)){
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
                   
                
                table.getColumnModel().getColumn(0).setPreferredWidth(100);
                table.getColumnModel().getColumn(1).setPreferredWidth(100);
                table.getColumnModel().getColumn(2).setPreferredWidth(100);
                table.getColumnModel().getColumn(3).setPreferredWidth(500);
                table.setBorder(new MatteBorder(1, 1, 0, 0, new Color(220,220,220)));
                table.setGridColor(new Color(220,220,220));
                
                table.setCellSelectionEnabled(false);
                DefaultTableModel tableModel = (DefaultTableModel) table.getModel();
                

                try{
                    FileReader fr = new FileReader(new File(dataDel.toURI()));
                    BufferedReader br = new BufferedReader(fr);
                    String line;
                    while((line=br.readLine())!=null){
                        String[] lnSplitted = line.split(";");

                        if (lnSplitted[1].equals(logged) && lnSplitted[6].equals("True") ){
                            tableModel.addRow(new Object[]{lnSplitted[1], lnSplitted[2] + " " + lnSplitted[3], lnSplitted[4], lnSplitted[7], lnSplitted[0], lnSplitted[6]});
                        }
                    }
                    fr.close();
                }catch(Exception e){}

                JScrollPane tableScr  = new JScrollPane(table);
                tableScr.setBorder( BorderFactory.createLineBorder(new Color(170,170,170)));
                tableScr.setBounds(10, 60, 960, 390);
            
                table.removeColumn(table.getColumnModel().getColumn(4));                   
                table.removeColumn(table.getColumnModel().getColumn(4));   

                JLabel titleLabel = new JLabel("DELIVERY HISTORY");
                titleLabel.setBounds(0, 5, getWidth(), 50);
                titleLabel.setHorizontalAlignment(JLabel.CENTER);
                titleLabel.setFont(new Font("joystix monospace", Font.BOLD, 30));
                
                toRecFrame.add(titleLabel);    
                toRecFrame.add(tableScr);                 
                toRecFrame.add(new JPanel());                     
                toRecFrame.setVisible(true);
                
            }
        });

            backgroundLabel.add(historyButton);

            searchButton = new CustomButton("SEARCH");
            searchButton.setBounds(getWidth() - 265, 100, 200, 50);
            backgroundLabel.add(searchButton);

            cartButton = new CustomButton("Cart");
            cartButton.setBounds(getWidth() - 265, 160, 200, 50);
            backgroundLabel.add(cartButton);

            iphoneLabel = new JLabel("Iphone");
            ImageIcon iphone = new ImageIcon(iphonePath);
            iphoneLabel.setIcon(iphone);
            
            iphonePrice = new JLabel("$999.99");
            iphonePrice.setFont(new Font("joystix monospace", Font.BOLD, 20));
            iphonePrice.setForeground(Color.BLACK);
            iphonePrice.setPreferredSize(new Dimension(85, 50));
            // breadLabel = new JLabel(new ImageIcon(breadPath));

            iphoneMinusButton = new CustomButton("-");
            iphonePlusButton = new CustomButton("+");
            customizeProductButton(iphoneLabel, iphoneMinusButton, iphonePlusButton);

            macbookLabel = new JLabel("Macbook");
            ImageIcon macbook = new ImageIcon(macbookPath);
            macbookLabel.setIcon(macbook);

            macbookPrice = new JLabel("$1999.99");
            macbookPrice.setFont(new Font("joystix monospace", Font.BOLD, 20));
            macbookPrice.setForeground(Color.BLACK);
            macbookPrice.setPreferredSize(new Dimension(85, 50));
            // chocolateLabel = new JLabel(new ImageIcon(breadPath));

            // Adjust dimensions and positions for the product elements
            int labelWidth = 475;
            int labelHeight = 200;
            int buttonWidth = 60;
            int buttonHeight = 50;
            
            macbookMinusButton = new CustomButton("-");
            macbookPlusButton = new CustomButton("+");
            customizeProductButton(macbookLabel, macbookMinusButton, macbookPlusButton);

            samsungLabel = new JLabel("Samsung");
            ImageIcon samsung = new ImageIcon(samsungPath);
            samsungLabel.setIcon(samsung);

            samsungPrice = new JLabel("$729.99");
            samsungPrice.setFont(new Font("joystix monospace", Font.BOLD, 20));
            samsungPrice.setForeground(Color.BLACK);
            samsungPrice.setPreferredSize(new Dimension(85, 50));

            samsungMinusButton = new CustomButton("-");
            samsungPlusButton = new CustomButton("+");
            samsungLabel.setPreferredSize(new Dimension(labelWidth, labelHeight));

            customizeProductButton(samsungLabel, samsungMinusButton, samsungPlusButton);


            iphoneLabel.setPreferredSize(new Dimension(labelWidth, labelHeight));
            iphoneMinusButton.setPreferredSize(new Dimension(buttonWidth, buttonHeight));
            iphonePlusButton.setPreferredSize(new Dimension(buttonWidth, buttonHeight));

            macbookLabel.setPreferredSize(new Dimension(labelWidth, labelHeight));
            macbookMinusButton.setPreferredSize(new Dimension(buttonWidth, buttonHeight));
            macbookPlusButton.setPreferredSize(new Dimension(buttonWidth, buttonHeight));

            // Create separate panels for bread and chocolate labels along with their
            // buttons
            JPanel iphonePanel = new JPanel();
            iphonePanel.setOpaque(false);
            iphonePanel.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 0));
            iphonePanel.add(iphoneLabel);
            iphonePanel.add(iphonePrice);
            iphonePanel.add(iphoneMinusButton);
            iphonePanel.add(iphonePlusButton);

            JPanel macbookPanel = new JPanel();
            macbookPanel.setOpaque(false);
            macbookPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 0));
            macbookPanel.add(macbookLabel);
            macbookPanel.add(macbookPrice);
            macbookPanel.add(macbookMinusButton);
            macbookPanel.add(macbookPlusButton);

            // Create a separate panel for the ramen label and its buttons
            JPanel samsungPanel = new JPanel();
            samsungPanel.setOpaque(false);
            samsungPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 0));
            samsungPanel.add(samsungLabel);
            samsungPanel.add(samsungPrice);
            samsungPanel.add(samsungMinusButton);
            samsungPanel.add(samsungPlusButton);

            // Add the product elements to the product panel
            productPanel.add(iphonePanel);
            productPanel.add(macbookPanel);
            productPanel.add(samsungPanel);

            // Initialize product images
            productImages = new HashMap<>();
            productImages.put("Iphone", new ImageIcon(iphonePath));
            productImages.put("Macbook", new ImageIcon(macbookPath));
            productImages.put("Samsung", new ImageIcon(samsungPath));

            // Cart frame
            cartSizeLabel = new JLabel("<html>Cart Size: 0<br/>Total Price: P0<html/>");
            cartSizeLabel.setBounds(50, 160, 500, 60);
            cartSizeLabel.setFont(new Font("joystix monospace", Font.BOLD, 20));
            backgroundLabel.add(cartSizeLabel);

            // Initialize Shopping cart

            shoppingCart = new ArrayList<>();

            // Add Action Listener to Cart Button
            cartButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent a) {
                    showCartDialog();
                }
            });

            // Add action listener to deliver Button
            deliverButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent ae) {
                    DeliverWindow();
                }
            });

            // Add action listener to the search button
            searchButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    showSearchWindow();
                }
            });

            setVisible(true);

            // method to add to cart
        }

        private void addToCart(String product) {
        shoppingCart.add(product.split(" - ")[0]);
        updateCartSizeLabel();

        // updates the cart
    }

    private void updateCartSizeLabel() {
        int iphone = 0, macbook = 0, samsung = 0;
        double totalIphone = 0, totalMacbook = 0, totalSamsung = 0;

        for (String string : shoppingCart) {
            if (string.equals("Iphone"))
                iphone += 1;
            else if (string.equals("Macbook"))
                macbook += 1;
            else if (string.equals("Samsung"))
                samsung += 1;
        }

        if (iphone != 0) {
            iphoneLabel.setText("Iphone - " + iphone);
            totalIphone = 999.99 * iphone;  // Price for Iphone in USD
        } else
            iphoneLabel.setText("Iphone");

        if (macbook != 0) {
            macbookLabel.setText("Macbook - " + macbook);
            totalMacbook = 1999.99 * macbook;  // Price for Macbook in USD
        } else
            macbookLabel.setText("Macbook");

        if (samsung != 0) {
            samsungLabel.setText("Samsung - " + samsung);
            totalSamsung = 729.99 * samsung;  // Price for Samsung in USD
        } else
            samsungLabel.setText("Samsung");

        double totalPrice = totalIphone + totalMacbook + totalSamsung;
        cartSizeLabel.setText(String.format("<html>Cart Size: %d<br>Total Price: $%.2f<html/>", shoppingCart.size(), totalPrice));

        // shows Item and displays the updated Cart
    }

    private void showCartDialog() {
        StringBuilder cartContent = new StringBuilder();

        int iphone = 0, macbook = 0, samsung = 0;
        double totalIphone = 0, totalMacbook = 0, totalSamsung = 0;

        for (String string : shoppingCart) {
            if (string.equals("Iphone"))
                iphone += 1;
            else if (string.equals("Macbook"))
                macbook += 1;
            else if (string.equals("Samsung"))
                samsung += 1;
        }

        if (iphone != 0)
            cartContent.append(String.format("Iphone - %d pcs ($%.2f)", iphone, totalIphone = 999.99 * iphone)).append("\n");
        if (macbook != 0)
            cartContent.append(String.format("Macbook - %d pcs ($%.2f)", macbook, totalMacbook = 1999.99 * macbook)).append("\n");
        if (samsung != 0)
            cartContent.append(String.format("Samsung - %d pcs ($%.2f)", samsung, totalSamsung = 729.99 * samsung)).append("\n");

        double totalPrice = totalIphone + totalMacbook + totalSamsung;
        cartContent.append(String.format("Total Amount: $%.2f", totalPrice));

        JOptionPane.showMessageDialog(
            MainFrame.this,
            cartContent.toString(),
            "Shopping Cart",
            JOptionPane.INFORMATION_MESSAGE);

        // remove from cart
    }

    private void removeFromCart(String product) {
        shoppingCart.remove(product.split(" - ")[0]);
        updateCartSizeLabel();
    }


    // Custom Buttons
    private void customizeProductButton(JLabel productLabel, CustomButton minusButton, CustomButton plusButton) {
        productLabel.setFont(new Font("joystix monospace", Font.BOLD, 20));
        productLabel.setForeground(Color.BLACK); // Set label text color
        Color buttonColor = new Color(255, 255, 255);
        minusButton.setBackground(buttonColor);
        plusButton.setBackground(buttonColor);

        plusButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addToCart(productLabel.getText());
            }
        });

        minusButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                removeFromCart(productLabel.getText());
            }
        });

        minusButton.setPreferredSize(new Dimension(60, 50));
        plusButton.setPreferredSize(new Dimension(60, 50));
    }

    // Delivery Frame
    private void DeliverWindow() {
        JFrame deliverFrame = new JFrame("Delivery Details");
        deliverFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        deliverFrame.setFont(new Font("joystix monospace", Font.BOLD, 30));
        deliverFrame.setSize(500, 500);
        deliverFrame.setLocationRelativeTo(this);
        deliverFrame.setResizable(false);

        deliverFrame.setLayout(new BorderLayout());


        // Create a JTextArea to display the cart content
        JTextArea cartTextArea = new JTextArea(10, 20);
        cartTextArea.setEditable(false);
        JScrollPane cartScrollPane = new JScrollPane(cartTextArea);


        // Create other components for delivery details
        JLabel firstNameLabel = new JLabel("First Name:");
        JTextField firstNameField = new JTextField(15);
        JLabel lastNameLabel = new JLabel("Last Name:");
        JTextField lastNameField = new JTextField(15);
        JLabel addressLabel = new JLabel("Address:");
        JTextField addressField = new JTextField(15);
        JLabel paymentMethodLabel = new JLabel("Payment Method:");
        JComboBox<String> paymentMethodCombo = new JComboBox<>(new String[]{"Credit Card", "Cash on Delivery"});

        // Display the cart content in the JTextArea
        StringBuilder cartContent = new StringBuilder();

        int iphone = 0, macbook = 0, samsung = 0,
            totalIphone = 0, totalMacbook = 0, totalSamsung = 0;
        for (String string : shoppingCart) {
            if (string.equals("Iphone"))
                iphone += 1;
            else if (string.equals("Macbook"))
                macbook += 1;
            else if (string.equals("Samsung"))
            samsung += 1;
        } 

        if (iphone != 0)
            cartContent.append(String.format("Iphone - %d pcs ($%d)", iphone, totalIphone = (int) (999.99 * iphone))).append("\n");
        if (macbook != 0)
            cartContent.append(String.format("Macbook - %d pcs ($%d)", macbook, totalMacbook = (int) (1999.99 * macbook))).append("\n");
        if (samsung != 0)
            cartContent.append(String.format("Samsung - %d pcs ($%d)", samsung, totalSamsung = (int) (729.99 * samsung))).append("\n");

        cartContent.append(String.format("Total Amount: $%d", totalIphone + totalMacbook + totalSamsung));


        cartTextArea.setText(cartContent.toString());


            
            CustomButton deliverButton = new CustomButton("Deliver");
            deliverButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent ae) {
                    if (ae.getSource() == deliverButton) {
                        String firstName = firstNameField.getText();
                        String lastName = lastNameField.getText();
                        String address = addressField.getText();        
                        String paymentMethod = (String) paymentMethodCombo.getSelectedItem();

                        // Display the delivery details and cart content
                        StringBuilder deliveryDetails = new StringBuilder();
                        deliveryDetails.append("Delivery Details:\n\n");
                        deliveryDetails.append("First Name: ").append(firstName).append("\n");
                        deliveryDetails.append("Last Name: ").append(lastName).append("\n");
                        deliveryDetails.append("Address: ").append(address).append("\n");
                        deliveryDetails.append("Payment Method: ").append(paymentMethod).append("\n\n");
                        deliveryDetails.append("Cart Content:\n").append(cartTextArea.getText());

                        JOptionPane.showMessageDialog(deliverFrame, deliveryDetails.toString(), "Delivery Details", JOptionPane.INFORMATION_MESSAGE);


                        // Perform payment processing or save user information
                        // You can add your payment logic or database storage code here

                        try {
                            FileWriter fw = new FileWriter(new File(dataDel.toURI()), true);
                            BufferedWriter bw = new BufferedWriter(fw);
                            
                            List<String> splCart = new ArrayList<String>(Arrays.asList(cartContent.toString().split("\n")));
                            splCart.remove(splCart.size()-1);
                            

                            bw.write(String.format(
                                "%s;%s;%s;%s;%s;%s;%s;%s",
                                UUID.randomUUID().toString(),
                                logged,
                                firstName,
                                lastName,                            
                                address,
                                paymentMethod,
                                "False",
                                String.join(",", splCart)));

                            bw.newLine();
                            bw.close();
                            fw.close();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        

                        JOptionPane.showMessageDialog(deliverFrame, "Payment Successful!\nThank you, " + firstName + " " + lastName + "!");
                        deliverFrame.dispose();
                    }
                }
            });


            
            // Add components to the deliverFrame
            JPanel deliveryPanel = new JPanel();
            deliveryPanel.setLayout(new GridLayout(6, 2));
            deliveryPanel.add(firstNameLabel);
            deliveryPanel.add(firstNameField);
            deliveryPanel.add(lastNameLabel);
            deliveryPanel.add(lastNameField);
            deliveryPanel.add(addressLabel);
            deliveryPanel.add(addressField);
            deliveryPanel.add(paymentMethodLabel);
            deliveryPanel.add(paymentMethodCombo);
            deliveryPanel.add(new JLabel()); // empty label for spacing


            deliverFrame.add(cartScrollPane, BorderLayout.NORTH);
            deliverFrame.add(deliveryPanel, BorderLayout.CENTER);
            deliverFrame.add(deliverButton, BorderLayout.SOUTH);
            deliverFrame.setVisible(true);

            
        }
    

        
    private void showSearchWindow() {
        JFrame searchFrame = new JFrame("Search Products");
        searchFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        searchFrame.setFont(new Font("joystix monospace", Font.BOLD, 30));
        searchFrame.setSize(400, 300);
        searchFrame.setLayout(new FlowLayout());

        // Create search label and text field
        JLabel searchLabel = new JLabel("Search: ");
        JTextField searchField = new JTextField(20);
        searchLabel.setFont(new Font("joystix monospace", Font.BOLD, 10));

        // Create search button
        CustomButton searchButton = new CustomButton("Search");
        searchButton.setFont(new Font("joystix monospace", Font.BOLD, 10));


        // Add action listener to the search button
        searchButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String searchText = searchField.getText();
                if (productImages.containsKey(searchText)) {
                    // If the searched product exists, create and show a new window with the product image and details
                    JFrame resultFrame = new JFrame("Search Result");
                    resultFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
                    resultFrame.setLayout(new BorderLayout());

                    // Create and add the product image label at the top center
                    JLabel imageLabel = new JLabel(productImages.get(searchText));
                    resultFrame.add(imageLabel, BorderLayout.NORTH);

                    // Create and add the product details text area dynamically aligned in the center
         String details;
                if (searchText.equalsIgnoreCase("Iphone")) {
                    details = "Details: \nA powerful smartphone with an advanced camera system";
                } else if (searchText.equalsIgnoreCase("Macbook")) {
                    details = "Details:\nA high performance laptop for professionals.";
                } else if (searchText.equalsIgnoreCase("Samsung")) {
                    details = "Details:\nA feature-packed Android smartphone.";
                } else if (searchText.equalsIgnoreCase("Nike")){
                    details = "Details: \nRunning shoes with excellent cushioning and responsiveness.";
                } else {
                    details = "No details found for your search query: " + searchText;
                }
                    JTextArea detailsArea = new JTextArea(details);
                    detailsArea.setEditable(false);
                    JScrollPane scrollPane = new JScrollPane(detailsArea);
                    resultFrame.add(scrollPane, BorderLayout.CENTER);

                    // Resize the window to fit the details
                    resultFrame.pack();

                    resultFrame.setVisible(true);
                }
            }
        });

        // Add components to the search frame
        searchFrame.add(searchLabel);
        searchFrame.add(searchField);
        searchFrame.add(searchButton);

        searchFrame.setVisible(true);
    }


}
